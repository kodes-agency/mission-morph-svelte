/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    query AboutPage {\n      aboutPage {\n        data {\n          attributes {\n            heroHeading\n            heroContent\n            heroThumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            ctaHeading\n            ctaContent\n            ctaButton\n            seo {\n              description\n              keywords\n              title\n            }\n            step {\n              content\n              title\n              id\n            }\n          }\n        }\n      }\n    }\n  ": types.AboutPageDocument,
    "\n    query Blogs($filters: BlogFiltersInput) {\n      blogCategories {\n        data {\n          attributes {\n            category\n          }\n        }\n      }\n      blogs(filters: $filters) {\n        data {\n          id\n          attributes {\n            slug\n            blogCategories {\n              data {\n                attributes {\n                  category\n                }\n              }\n            }\n            thumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            title\n            publishedAt\n          }\n        }\n      }\n      homePage {\n        data {\n          attributes {\n            blogHeading\n            blogThumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            blogContent\n          }\n        }\n      }\n    }\n  ": types.BlogsDocument,
    "\n    query HomePage {\n      homePage {\n        data {\n          attributes {\n            heroHeading\n            aboutHeading\n            aboutContent\n            aboutImage {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            images {\n              image {\n                data {\n                  attributes {\n                    url\n                    alternativeText\n                  }\n                }\n              }\n            }\n            heroVercorLarge {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            heroVercorMedium {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            heroVercorSmall {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            blogs {\n              data {\n                id\n                attributes {\n                  title\n                  slug\n                  thumbnail {\n                    data {\n                      attributes {\n                        alternativeText\n                        url\n                      }\n                    }\n                  }\n                  publishedAt\n                  blogCategories {\n                    data {\n                      attributes {\n                        category\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            blogContent\n            blogHeading\n            blogThumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            ctaContent\n            ctaHeading\n            ctaImage {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            servicesHeading\n            seo {\n              keywords\n              title\n              description\n            }\n          }\n        }\n      }\n      services {\n        data {\n          attributes {\n            slug\n            color\n            homePageCursorLable\n            homePageCTA\n            homePageContent\n            homePageThumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            homePageTitle\n          }\n        }\n      }\n    }\n  ": types.HomePageDocument,
    "\n    query SingleBlog($filters: BlogFiltersInput) {\n      blogs(filters: $filters) {\n        data {\n          attributes {\n            blogCategories {\n              data {\n                attributes {\n                  category\n                }\n              }\n            }\n            contents\n            slug\n            seo {\n              description\n              keywords\n              title\n            }\n            publishedAt\n            thumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            title\n          }\n        }\n      }\n    }\n  ": types.SingleBlogDocument,
    "\n    query ServicePage($filters: ServiceFiltersInput) {\n      servicePage {\n        data {\n          attributes {\n            serviceCTA {\n              title\n              noButton\n              yesButton\n            }\n            serviceCTA2 {\n              image {\n                data {\n                  attributes {\n                    alternativeText\n                    url\n                  }\n                }\n              }\n              title\n            }\n          }\n        }\n      }\n      services(filters: $filters) {\n        data {\n          attributes {\n            color\n            heroSection {\n              image {\n                data {\n                  attributes {\n                    alternativeText\n                    url\n                  }\n                }\n              }\n              title\n              content\n              id\n            }\n            homePageContent\n            homePageThumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            homePageTitle\n            seo {\n              title\n              keywords\n              description\n            }\n            statistics {\n              number\n              paragraph\n            }\n            subService {\n              price\n              title\n              features {\n                feature\n              }\n              contents\n              id\n              \n            }\n            title\n          }\n        }\n      }\n    }\n  ": types.ServicePageDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query AboutPage {\n      aboutPage {\n        data {\n          attributes {\n            heroHeading\n            heroContent\n            heroThumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            ctaHeading\n            ctaContent\n            ctaButton\n            seo {\n              description\n              keywords\n              title\n            }\n            step {\n              content\n              title\n              id\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query AboutPage {\n      aboutPage {\n        data {\n          attributes {\n            heroHeading\n            heroContent\n            heroThumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            ctaHeading\n            ctaContent\n            ctaButton\n            seo {\n              description\n              keywords\n              title\n            }\n            step {\n              content\n              title\n              id\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Blogs($filters: BlogFiltersInput) {\n      blogCategories {\n        data {\n          attributes {\n            category\n          }\n        }\n      }\n      blogs(filters: $filters) {\n        data {\n          id\n          attributes {\n            slug\n            blogCategories {\n              data {\n                attributes {\n                  category\n                }\n              }\n            }\n            thumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            title\n            publishedAt\n          }\n        }\n      }\n      homePage {\n        data {\n          attributes {\n            blogHeading\n            blogThumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            blogContent\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query Blogs($filters: BlogFiltersInput) {\n      blogCategories {\n        data {\n          attributes {\n            category\n          }\n        }\n      }\n      blogs(filters: $filters) {\n        data {\n          id\n          attributes {\n            slug\n            blogCategories {\n              data {\n                attributes {\n                  category\n                }\n              }\n            }\n            thumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            title\n            publishedAt\n          }\n        }\n      }\n      homePage {\n        data {\n          attributes {\n            blogHeading\n            blogThumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            blogContent\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query HomePage {\n      homePage {\n        data {\n          attributes {\n            heroHeading\n            aboutHeading\n            aboutContent\n            aboutImage {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            images {\n              image {\n                data {\n                  attributes {\n                    url\n                    alternativeText\n                  }\n                }\n              }\n            }\n            heroVercorLarge {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            heroVercorMedium {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            heroVercorSmall {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            blogs {\n              data {\n                id\n                attributes {\n                  title\n                  slug\n                  thumbnail {\n                    data {\n                      attributes {\n                        alternativeText\n                        url\n                      }\n                    }\n                  }\n                  publishedAt\n                  blogCategories {\n                    data {\n                      attributes {\n                        category\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            blogContent\n            blogHeading\n            blogThumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            ctaContent\n            ctaHeading\n            ctaImage {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            servicesHeading\n            seo {\n              keywords\n              title\n              description\n            }\n          }\n        }\n      }\n      services {\n        data {\n          attributes {\n            slug\n            color\n            homePageCursorLable\n            homePageCTA\n            homePageContent\n            homePageThumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            homePageTitle\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query HomePage {\n      homePage {\n        data {\n          attributes {\n            heroHeading\n            aboutHeading\n            aboutContent\n            aboutImage {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            images {\n              image {\n                data {\n                  attributes {\n                    url\n                    alternativeText\n                  }\n                }\n              }\n            }\n            heroVercorLarge {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            heroVercorMedium {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            heroVercorSmall {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            blogs {\n              data {\n                id\n                attributes {\n                  title\n                  slug\n                  thumbnail {\n                    data {\n                      attributes {\n                        alternativeText\n                        url\n                      }\n                    }\n                  }\n                  publishedAt\n                  blogCategories {\n                    data {\n                      attributes {\n                        category\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            blogContent\n            blogHeading\n            blogThumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            ctaContent\n            ctaHeading\n            ctaImage {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            servicesHeading\n            seo {\n              keywords\n              title\n              description\n            }\n          }\n        }\n      }\n      services {\n        data {\n          attributes {\n            slug\n            color\n            homePageCursorLable\n            homePageCTA\n            homePageContent\n            homePageThumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            homePageTitle\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query SingleBlog($filters: BlogFiltersInput) {\n      blogs(filters: $filters) {\n        data {\n          attributes {\n            blogCategories {\n              data {\n                attributes {\n                  category\n                }\n              }\n            }\n            contents\n            slug\n            seo {\n              description\n              keywords\n              title\n            }\n            publishedAt\n            thumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            title\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query SingleBlog($filters: BlogFiltersInput) {\n      blogs(filters: $filters) {\n        data {\n          attributes {\n            blogCategories {\n              data {\n                attributes {\n                  category\n                }\n              }\n            }\n            contents\n            slug\n            seo {\n              description\n              keywords\n              title\n            }\n            publishedAt\n            thumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            title\n          }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query ServicePage($filters: ServiceFiltersInput) {\n      servicePage {\n        data {\n          attributes {\n            serviceCTA {\n              title\n              noButton\n              yesButton\n            }\n            serviceCTA2 {\n              image {\n                data {\n                  attributes {\n                    alternativeText\n                    url\n                  }\n                }\n              }\n              title\n            }\n          }\n        }\n      }\n      services(filters: $filters) {\n        data {\n          attributes {\n            color\n            heroSection {\n              image {\n                data {\n                  attributes {\n                    alternativeText\n                    url\n                  }\n                }\n              }\n              title\n              content\n              id\n            }\n            homePageContent\n            homePageThumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            homePageTitle\n            seo {\n              title\n              keywords\n              description\n            }\n            statistics {\n              number\n              paragraph\n            }\n            subService {\n              price\n              title\n              features {\n                feature\n              }\n              contents\n              id\n              \n            }\n            title\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query ServicePage($filters: ServiceFiltersInput) {\n      servicePage {\n        data {\n          attributes {\n            serviceCTA {\n              title\n              noButton\n              yesButton\n            }\n            serviceCTA2 {\n              image {\n                data {\n                  attributes {\n                    alternativeText\n                    url\n                  }\n                }\n              }\n              title\n            }\n          }\n        }\n      }\n      services(filters: $filters) {\n        data {\n          attributes {\n            color\n            heroSection {\n              image {\n                data {\n                  attributes {\n                    alternativeText\n                    url\n                  }\n                }\n              }\n              title\n              content\n              id\n            }\n            homePageContent\n            homePageThumbnail {\n              data {\n                attributes {\n                  alternativeText\n                  url\n                }\n              }\n            }\n            homePageTitle\n            seo {\n              title\n              keywords\n              description\n            }\n            statistics {\n              number\n              paragraph\n            }\n            subService {\n              price\n              title\n              features {\n                feature\n              }\n              contents\n              id\n              \n            }\n            title\n          }\n        }\n      }\n    }\n  "];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;